From 5bb64ae9305bbe20bbf2f95dfdddb0966d7c9a50 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jos=C3=A9=20Pekkarinen?= <jose.pekkarinen@unikie.com>
Date: Fri, 10 Dec 2021 13:56:22 +0200
Subject: [PATCH] Fix strict aliasing warnings as errors
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Fix strict aliasing warnings as errors

PR: https://github.com/OpenSC/OpenSC/pull/2466

Signed-off-by: Jos√© Pekkarinen <jose.pekkarinen@unikie.com>
---
 src/libopensc/card-gids.c | 20 ++++++++++++--------
 src/libopensc/card-gpk.c  | 11 ++++++-----
 src/tools/gids-tool.c     |  3 ++-
 3 files changed, 20 insertions(+), 14 deletions(-)

diff --git a/src/libopensc/card-gids.c b/src/libopensc/card-gids.c
index f25e37d..17901cd 100644
--- a/src/libopensc/card-gids.c
+++ b/src/libopensc/card-gids.c
@@ -691,7 +691,8 @@ static int gids_finish(sc_card_t *card)
 // the cmap file is used to detect the key algorithm / size
 static int gids_get_crypto_identifier_from_key_ref(sc_card_t *card, const unsigned char keyref, unsigned char *cryptoidentifier) {
 	struct gids_private_data *data = (struct gids_private_data *) card->drv_data;
-	PCONTAINER_MAP_RECORD records = (PCONTAINER_MAP_RECORD) data->cmapfile;
+	PCONTAINER_MAP_RECORD records = malloc(sizeof(CONTAINER_MAP_RECORD));
+	memcpy(records, data->cmapfile, sizeof(CONTAINER_MAP_RECORD));
 	int recordsnum = (int) (data->cmapfilesize / sizeof(CONTAINER_MAP_RECORD));
 	int index = keyref - GIDS_FIRST_KEY_IDENTIFIER;
 	if (index >= recordsnum) {
@@ -1112,10 +1113,10 @@ gids_get_all_containers(sc_card_t* card, size_t *recordsnum) {
 // return the detail about a container to emulate a pkcs15 card
 static int
 gids_get_container_detail(sc_card_t* card, sc_cardctl_gids_get_container_t* container) {
-	PCONTAINER_MAP_RECORD records = NULL;
+	PCONTAINER_MAP_RECORD records = malloc(sizeof(CONTAINER_MAP_RECORD));
 	struct gids_private_data *privatedata = (struct gids_private_data *) card->drv_data;
 	size_t recordsnum, num, i;
-	records = (PCONTAINER_MAP_RECORD) privatedata ->cmapfile;
+	memcpy(records, privatedata->cmapfile, sizeof(CONTAINER_MAP_RECORD));
 	recordsnum = (privatedata ->cmapfilesize / sizeof(CONTAINER_MAP_RECORD));
 
 	num = container->containernum ;
@@ -1158,7 +1159,8 @@ gids_get_container_detail(sc_card_t* card, sc_cardctl_gids_get_container_t* cont
 static int
 gids_select_key_reference(sc_card_t *card, sc_pkcs15_prkey_info_t* key_info) {
 	struct gids_private_data *data = (struct gids_private_data *) card->drv_data;
-	PCONTAINER_MAP_RECORD records = (PCONTAINER_MAP_RECORD) data->cmapfile;
+	PCONTAINER_MAP_RECORD records = malloc(sizeof(CONTAINER_MAP_RECORD));
+	memcpy(records, data->cmapfile, sizeof(CONTAINER_MAP_RECORD));
 	size_t recordsnum;
 	int r;
 	char ch_tmp[10];
@@ -1302,7 +1304,8 @@ static int gids_create_keyfile(sc_card_t *card, sc_pkcs15_object_t *object) {
 	struct gids_private_data *data = (struct gids_private_data *) card->drv_data;
 	size_t recordnum;
 	size_t containernum = key_info->key_reference - GIDS_FIRST_KEY_IDENTIFIER;
-	PCONTAINER_MAP_RECORD records = ((PCONTAINER_MAP_RECORD) cmapbuffer) + containernum;
+	PCONTAINER_MAP_RECORD records = malloc(sizeof(CONTAINER_MAP_RECORD));
+	memcpy(records, cmapbuffer + containernum, sizeof(CONTAINER_MAP_RECORD));
 	struct gids_keymap_record* keymaprecord = NULL;
 	int i;
 
@@ -1390,12 +1393,12 @@ static int gids_create_keyfile(sc_card_t *card, sc_pkcs15_object_t *object) {
 
 	// convert char to wchar
 	for(i = 0; i < MAX_CONTAINER_NAME_LEN && object->label[i]; i++) {
-		records->wszGuid[i] = object->label[i];
+		records->wszGuid[i] = (unsigned short) object->label[i];
 	}
 
 	// TODO: check if a container with the same name already exists and prevent is creation or change its name
 
-	records->bFlags = CONTAINER_MAP_VALID_CONTAINER;
+	records->bFlags = (unsigned char) CONTAINER_MAP_VALID_CONTAINER;
 	if (recordnum == 0) {
 		records->bFlags |= CONTAINER_MAP_DEFAULT_CONTAINER;
 	}
@@ -1638,7 +1641,8 @@ static int gids_delete_container_num(sc_card_t *card, size_t containernum) {
 	size_t keymaprecordnum = 0;
 	struct gids_private_data *data = (struct gids_private_data *) card->drv_data;
 	size_t recordnum;
-	PCONTAINER_MAP_RECORD records = ((PCONTAINER_MAP_RECORD) cmapbuffer) + containernum;
+	PCONTAINER_MAP_RECORD records = malloc(sizeof(CONTAINER_MAP_RECORD));
+	memcpy(records, cmapbuffer + containernum, sizeof(CONTAINER_MAP_RECORD));
 	struct gids_keymap_record* keymaprecord = NULL;
 
 	SC_FUNC_CALLED(card->ctx, SC_LOG_DEBUG_VERBOSE);
diff --git a/src/libopensc/card-gpk.c b/src/libopensc/card-gpk.c
index 983ab5b..8afb0ee 100644
--- a/src/libopensc/card-gpk.c
+++ b/src/libopensc/card-gpk.c
@@ -228,11 +228,12 @@ static int
 match_path(sc_card_t *card, unsigned short int **pathptr, size_t *pathlen,
 		int need_info)
 {
-	unsigned short int	*curptr, *ptr;
+	u8			*curptr;
+	unsigned short int	*ptr;
 	size_t		curlen, len;
 	size_t		i;
 
-	curptr = (unsigned short int *) card->cache.current_path.value;
+	curptr = (u8 *) card->cache.current_path.value;
 	curlen = card->cache.current_path.len;
 	ptr    = *pathptr;
 	len    = *pathlen;
@@ -242,7 +243,7 @@ match_path(sc_card_t *card, unsigned short int **pathptr, size_t *pathlen,
 
 	/* Make sure path starts with MF.
 	 * Note the cached path should always begin with MF. */
-	if (ptr[0] != GPK_FID_MF || curptr[0] != GPK_FID_MF)
+	if (ptr[0] != (GPK_FID_MF >> 8) || curptr[0] != (GPK_FID_MF >> 8))
 		return 0;
 
 	for (i = 1; i < len && i < curlen; i++) {
@@ -545,7 +546,7 @@ gpk_select_id(sc_card_t *card, int kind, unsigned int fid,
 	/* Fix up the path cache.
 	 * NB we never cache the ID of an EF, just the DF path */
 	if (r == 0) {
-		unsigned short int	*path;
+		u8	*path;
 
 		switch (kind) {
 		case GPK_SEL_MF:
@@ -555,7 +556,7 @@ gpk_select_id(sc_card_t *card, int kind, unsigned int fid,
 			if (cp->len + 1 > SC_MAX_PATH_SIZE / 2) {
 				return SC_ERROR_INTERNAL;
 			}
-			path = (unsigned short int *) cp->value;
+			path = (u8 *) cp->value;
 			path[cp->len++] = fid;
 		}
 	} else {
diff --git a/src/tools/gids-tool.c b/src/tools/gids-tool.c
index 1c9602b..eed4296 100644
--- a/src/tools/gids-tool.c
+++ b/src/tools/gids-tool.c
@@ -401,7 +401,8 @@ static int print_info(sc_card_t *card) {
 		if (cmapfilesize == sizeof(cmapfile)) {
 			printf("Unable to find the container file (mscp\\cmapfile)\n");
 		} else {
-			PCONTAINER_MAP_RECORD cmaprecords = (PCONTAINER_MAP_RECORD) cmapfile;
+			PCONTAINER_MAP_RECORD cmaprecords = malloc(sizeof(CONTAINER_MAP_RECORD));
+			memcpy(cmaprecords, cmapfile, sizeof(CONTAINER_MAP_RECORD));
 			int cmaprecordnum = (cmapfilesize / sizeof(CONTAINER_MAP_RECORD));
 			int keymaprecordnum = -1;
 			struct gids_keymap_record* keymaprecord = ((struct gids_keymap_record*)(keymap +1));
-- 
2.30.2

